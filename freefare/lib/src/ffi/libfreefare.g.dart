// AUTO GENERATED FILE, DO NOT EDIT.
//
// Generated by `package:ffigen`.
// ignore_for_file: type=lint
import 'dart:ffi' as ffi;

/// Auto-generated, internal bindings to freefare
class NativeLibrary {
  /// Holds the symbol lookup function.
  final ffi.Pointer<T> Function<T extends ffi.NativeType>(String symbolName)
      _lookup;

  /// The symbols are looked up in [dynamicLibrary].
  NativeLibrary(ffi.DynamicLibrary dynamicLibrary)
      : _lookup = dynamicLibrary.lookup;

  /// The symbols are looked up with [lookup].
  NativeLibrary.fromLookup(
      ffi.Pointer<T> Function<T extends ffi.NativeType>(String symbolName)
          lookup)
      : _lookup = lookup;

  void nfc_init(
    ffi.Pointer<ffi.Pointer<nfc_context>> context,
  ) {
    return _nfc_init(
      context,
    );
  }

  late final _nfc_initPtr = _lookup<
      ffi.NativeFunction<
          ffi.Void Function(
              ffi.Pointer<ffi.Pointer<nfc_context>>)>>('nfc_init');
  late final _nfc_init = _nfc_initPtr
      .asFunction<void Function(ffi.Pointer<ffi.Pointer<nfc_context>>)>();

  void nfc_exit(
    ffi.Pointer<nfc_context> context,
  ) {
    return _nfc_exit(
      context,
    );
  }

  late final _nfc_exitPtr =
      _lookup<ffi.NativeFunction<ffi.Void Function(ffi.Pointer<nfc_context>)>>(
          'nfc_exit');
  late final _nfc_exit =
      _nfc_exitPtr.asFunction<void Function(ffi.Pointer<nfc_context>)>();

  int nfc_register_driver(
    ffi.Pointer<nfc_driver> driver,
  ) {
    return _nfc_register_driver(
      driver,
    );
  }

  late final _nfc_register_driverPtr =
      _lookup<ffi.NativeFunction<ffi.Int Function(ffi.Pointer<nfc_driver>)>>(
          'nfc_register_driver');
  late final _nfc_register_driver = _nfc_register_driverPtr
      .asFunction<int Function(ffi.Pointer<nfc_driver>)>();

  ffi.Pointer<nfc_device> nfc_open(
    ffi.Pointer<nfc_context> context,
    ffi.Pointer<ffi.Char> connstring,
  ) {
    return _nfc_open(
      context,
      connstring,
    );
  }

  late final _nfc_openPtr = _lookup<
      ffi.NativeFunction<
          ffi.Pointer<nfc_device> Function(
              ffi.Pointer<nfc_context>, ffi.Pointer<ffi.Char>)>>('nfc_open');
  late final _nfc_open = _nfc_openPtr.asFunction<
      ffi.Pointer<nfc_device> Function(
          ffi.Pointer<nfc_context>, ffi.Pointer<ffi.Char>)>();

  void nfc_close(
    ffi.Pointer<nfc_device> pnd,
  ) {
    return _nfc_close(
      pnd,
    );
  }

  late final _nfc_closePtr =
      _lookup<ffi.NativeFunction<ffi.Void Function(ffi.Pointer<nfc_device>)>>(
          'nfc_close');
  late final _nfc_close =
      _nfc_closePtr.asFunction<void Function(ffi.Pointer<nfc_device>)>();

  int nfc_abort_command(
    ffi.Pointer<nfc_device> pnd,
  ) {
    return _nfc_abort_command(
      pnd,
    );
  }

  late final _nfc_abort_commandPtr =
      _lookup<ffi.NativeFunction<ffi.Int Function(ffi.Pointer<nfc_device>)>>(
          'nfc_abort_command');
  late final _nfc_abort_command =
      _nfc_abort_commandPtr.asFunction<int Function(ffi.Pointer<nfc_device>)>();

  int nfc_list_devices(
    ffi.Pointer<nfc_context> context,
    ffi.Pointer<ffi.Pointer<ffi.Char>> connstrings,
    int connstrings_len,
  ) {
    return _nfc_list_devices(
      context,
      connstrings,
      connstrings_len,
    );
  }

  late final _nfc_list_devicesPtr = _lookup<
      ffi.NativeFunction<
          ffi.Size Function(
              ffi.Pointer<nfc_context>,
              ffi.Pointer<ffi.Pointer<ffi.Char>>,
              ffi.Size)>>('nfc_list_devices');
  late final _nfc_list_devices = _nfc_list_devicesPtr.asFunction<
      int Function(
          ffi.Pointer<nfc_context>, ffi.Pointer<ffi.Pointer<ffi.Char>>, int)>();

  int nfc_idle(
    ffi.Pointer<nfc_device> pnd,
  ) {
    return _nfc_idle(
      pnd,
    );
  }

  late final _nfc_idlePtr =
      _lookup<ffi.NativeFunction<ffi.Int Function(ffi.Pointer<nfc_device>)>>(
          'nfc_idle');
  late final _nfc_idle =
      _nfc_idlePtr.asFunction<int Function(ffi.Pointer<nfc_device>)>();

  int nfc_initiator_init(
    ffi.Pointer<nfc_device> pnd,
  ) {
    return _nfc_initiator_init(
      pnd,
    );
  }

  late final _nfc_initiator_initPtr =
      _lookup<ffi.NativeFunction<ffi.Int Function(ffi.Pointer<nfc_device>)>>(
          'nfc_initiator_init');
  late final _nfc_initiator_init = _nfc_initiator_initPtr
      .asFunction<int Function(ffi.Pointer<nfc_device>)>();

  int nfc_initiator_init_secure_element(
    ffi.Pointer<nfc_device> pnd,
  ) {
    return _nfc_initiator_init_secure_element(
      pnd,
    );
  }

  late final _nfc_initiator_init_secure_elementPtr =
      _lookup<ffi.NativeFunction<ffi.Int Function(ffi.Pointer<nfc_device>)>>(
          'nfc_initiator_init_secure_element');
  late final _nfc_initiator_init_secure_element =
      _nfc_initiator_init_secure_elementPtr
          .asFunction<int Function(ffi.Pointer<nfc_device>)>();

  int nfc_initiator_select_passive_target(
    ffi.Pointer<nfc_device> pnd,
    nfc_modulation nm,
    ffi.Pointer<ffi.Uint8> pbtInitData,
    int szInitData,
    ffi.Pointer<nfc_target> pnt,
  ) {
    return _nfc_initiator_select_passive_target(
      pnd,
      nm,
      pbtInitData,
      szInitData,
      pnt,
    );
  }

  late final _nfc_initiator_select_passive_targetPtr = _lookup<
      ffi.NativeFunction<
          ffi.Int Function(
              ffi.Pointer<nfc_device>,
              nfc_modulation,
              ffi.Pointer<ffi.Uint8>,
              ffi.Size,
              ffi.Pointer<nfc_target>)>>('nfc_initiator_select_passive_target');
  late final _nfc_initiator_select_passive_target =
      _nfc_initiator_select_passive_targetPtr.asFunction<
          int Function(ffi.Pointer<nfc_device>, nfc_modulation,
              ffi.Pointer<ffi.Uint8>, int, ffi.Pointer<nfc_target>)>();

  int nfc_initiator_list_passive_targets(
    ffi.Pointer<nfc_device> pnd,
    nfc_modulation nm,
    ffi.Pointer<nfc_target> ant,
    int szTargets,
  ) {
    return _nfc_initiator_list_passive_targets(
      pnd,
      nm,
      ant,
      szTargets,
    );
  }

  late final _nfc_initiator_list_passive_targetsPtr = _lookup<
      ffi.NativeFunction<
          ffi.Int Function(
              ffi.Pointer<nfc_device>,
              nfc_modulation,
              ffi.Pointer<nfc_target>,
              ffi.Size)>>('nfc_initiator_list_passive_targets');
  late final _nfc_initiator_list_passive_targets =
      _nfc_initiator_list_passive_targetsPtr.asFunction<
          int Function(ffi.Pointer<nfc_device>, nfc_modulation,
              ffi.Pointer<nfc_target>, int)>();

  int nfc_initiator_poll_target(
    ffi.Pointer<nfc_device> pnd,
    ffi.Pointer<nfc_modulation> pnmTargetTypes,
    int szTargetTypes,
    int uiPollNr,
    int uiPeriod,
    ffi.Pointer<nfc_target> pnt,
  ) {
    return _nfc_initiator_poll_target(
      pnd,
      pnmTargetTypes,
      szTargetTypes,
      uiPollNr,
      uiPeriod,
      pnt,
    );
  }

  late final _nfc_initiator_poll_targetPtr = _lookup<
      ffi.NativeFunction<
          ffi.Int Function(
              ffi.Pointer<nfc_device>,
              ffi.Pointer<nfc_modulation>,
              ffi.Size,
              ffi.Uint8,
              ffi.Uint8,
              ffi.Pointer<nfc_target>)>>('nfc_initiator_poll_target');
  late final _nfc_initiator_poll_target =
      _nfc_initiator_poll_targetPtr.asFunction<
          int Function(ffi.Pointer<nfc_device>, ffi.Pointer<nfc_modulation>,
              int, int, int, ffi.Pointer<nfc_target>)>();

  int nfc_initiator_select_dep_target(
    ffi.Pointer<nfc_device> pnd,
    int ndm,
    int nbr,
    ffi.Pointer<nfc_dep_info> pndiInitiator,
    ffi.Pointer<nfc_target> pnt,
    int timeout,
  ) {
    return _nfc_initiator_select_dep_target(
      pnd,
      ndm,
      nbr,
      pndiInitiator,
      pnt,
      timeout,
    );
  }

  late final _nfc_initiator_select_dep_targetPtr = _lookup<
      ffi.NativeFunction<
          ffi.Int Function(
              ffi.Pointer<nfc_device>,
              ffi.Int32,
              ffi.Int32,
              ffi.Pointer<nfc_dep_info>,
              ffi.Pointer<nfc_target>,
              ffi.Int)>>('nfc_initiator_select_dep_target');
  late final _nfc_initiator_select_dep_target =
      _nfc_initiator_select_dep_targetPtr.asFunction<
          int Function(ffi.Pointer<nfc_device>, int, int,
              ffi.Pointer<nfc_dep_info>, ffi.Pointer<nfc_target>, int)>();

  int nfc_initiator_poll_dep_target(
    ffi.Pointer<nfc_device> pnd,
    int ndm,
    int nbr,
    ffi.Pointer<nfc_dep_info> pndiInitiator,
    ffi.Pointer<nfc_target> pnt,
    int timeout,
  ) {
    return _nfc_initiator_poll_dep_target(
      pnd,
      ndm,
      nbr,
      pndiInitiator,
      pnt,
      timeout,
    );
  }

  late final _nfc_initiator_poll_dep_targetPtr = _lookup<
      ffi.NativeFunction<
          ffi.Int Function(
              ffi.Pointer<nfc_device>,
              ffi.Int32,
              ffi.Int32,
              ffi.Pointer<nfc_dep_info>,
              ffi.Pointer<nfc_target>,
              ffi.Int)>>('nfc_initiator_poll_dep_target');
  late final _nfc_initiator_poll_dep_target =
      _nfc_initiator_poll_dep_targetPtr.asFunction<
          int Function(ffi.Pointer<nfc_device>, int, int,
              ffi.Pointer<nfc_dep_info>, ffi.Pointer<nfc_target>, int)>();

  int nfc_initiator_deselect_target(
    ffi.Pointer<nfc_device> pnd,
  ) {
    return _nfc_initiator_deselect_target(
      pnd,
    );
  }

  late final _nfc_initiator_deselect_targetPtr =
      _lookup<ffi.NativeFunction<ffi.Int Function(ffi.Pointer<nfc_device>)>>(
          'nfc_initiator_deselect_target');
  late final _nfc_initiator_deselect_target = _nfc_initiator_deselect_targetPtr
      .asFunction<int Function(ffi.Pointer<nfc_device>)>();

  int nfc_initiator_transceive_bytes(
    ffi.Pointer<nfc_device> pnd,
    ffi.Pointer<ffi.Uint8> pbtTx,
    int szTx,
    ffi.Pointer<ffi.Uint8> pbtRx,
    int szRx,
    int timeout,
  ) {
    return _nfc_initiator_transceive_bytes(
      pnd,
      pbtTx,
      szTx,
      pbtRx,
      szRx,
      timeout,
    );
  }

  late final _nfc_initiator_transceive_bytesPtr = _lookup<
      ffi.NativeFunction<
          ffi.Int Function(
              ffi.Pointer<nfc_device>,
              ffi.Pointer<ffi.Uint8>,
              ffi.Size,
              ffi.Pointer<ffi.Uint8>,
              ffi.Size,
              ffi.Int)>>('nfc_initiator_transceive_bytes');
  late final _nfc_initiator_transceive_bytes =
      _nfc_initiator_transceive_bytesPtr.asFunction<
          int Function(ffi.Pointer<nfc_device>, ffi.Pointer<ffi.Uint8>, int,
              ffi.Pointer<ffi.Uint8>, int, int)>();

  int nfc_initiator_transceive_bits(
    ffi.Pointer<nfc_device> pnd,
    ffi.Pointer<ffi.Uint8> pbtTx,
    int szTxBits,
    ffi.Pointer<ffi.Uint8> pbtTxPar,
    ffi.Pointer<ffi.Uint8> pbtRx,
    int szRx,
    ffi.Pointer<ffi.Uint8> pbtRxPar,
  ) {
    return _nfc_initiator_transceive_bits(
      pnd,
      pbtTx,
      szTxBits,
      pbtTxPar,
      pbtRx,
      szRx,
      pbtRxPar,
    );
  }

  late final _nfc_initiator_transceive_bitsPtr = _lookup<
      ffi.NativeFunction<
          ffi.Int Function(
              ffi.Pointer<nfc_device>,
              ffi.Pointer<ffi.Uint8>,
              ffi.Size,
              ffi.Pointer<ffi.Uint8>,
              ffi.Pointer<ffi.Uint8>,
              ffi.Size,
              ffi.Pointer<ffi.Uint8>)>>('nfc_initiator_transceive_bits');
  late final _nfc_initiator_transceive_bits =
      _nfc_initiator_transceive_bitsPtr.asFunction<
          int Function(
              ffi.Pointer<nfc_device>,
              ffi.Pointer<ffi.Uint8>,
              int,
              ffi.Pointer<ffi.Uint8>,
              ffi.Pointer<ffi.Uint8>,
              int,
              ffi.Pointer<ffi.Uint8>)>();

  int nfc_initiator_transceive_bytes_timed(
    ffi.Pointer<nfc_device> pnd,
    ffi.Pointer<ffi.Uint8> pbtTx,
    int szTx,
    ffi.Pointer<ffi.Uint8> pbtRx,
    int szRx,
    ffi.Pointer<ffi.Uint32> cycles,
  ) {
    return _nfc_initiator_transceive_bytes_timed(
      pnd,
      pbtTx,
      szTx,
      pbtRx,
      szRx,
      cycles,
    );
  }

  late final _nfc_initiator_transceive_bytes_timedPtr = _lookup<
          ffi.NativeFunction<
              ffi.Int Function(
                  ffi.Pointer<nfc_device>,
                  ffi.Pointer<ffi.Uint8>,
                  ffi.Size,
                  ffi.Pointer<ffi.Uint8>,
                  ffi.Size,
                  ffi.Pointer<ffi.Uint32>)>>(
      'nfc_initiator_transceive_bytes_timed');
  late final _nfc_initiator_transceive_bytes_timed =
      _nfc_initiator_transceive_bytes_timedPtr.asFunction<
          int Function(ffi.Pointer<nfc_device>, ffi.Pointer<ffi.Uint8>, int,
              ffi.Pointer<ffi.Uint8>, int, ffi.Pointer<ffi.Uint32>)>();

  int nfc_initiator_transceive_bits_timed(
    ffi.Pointer<nfc_device> pnd,
    ffi.Pointer<ffi.Uint8> pbtTx,
    int szTxBits,
    ffi.Pointer<ffi.Uint8> pbtTxPar,
    ffi.Pointer<ffi.Uint8> pbtRx,
    int szRx,
    ffi.Pointer<ffi.Uint8> pbtRxPar,
    ffi.Pointer<ffi.Uint32> cycles,
  ) {
    return _nfc_initiator_transceive_bits_timed(
      pnd,
      pbtTx,
      szTxBits,
      pbtTxPar,
      pbtRx,
      szRx,
      pbtRxPar,
      cycles,
    );
  }

  late final _nfc_initiator_transceive_bits_timedPtr = _lookup<
      ffi.NativeFunction<
          ffi.Int Function(
              ffi.Pointer<nfc_device>,
              ffi.Pointer<ffi.Uint8>,
              ffi.Size,
              ffi.Pointer<ffi.Uint8>,
              ffi.Pointer<ffi.Uint8>,
              ffi.Size,
              ffi.Pointer<ffi.Uint8>,
              ffi.Pointer<ffi.Uint32>)>>('nfc_initiator_transceive_bits_timed');
  late final _nfc_initiator_transceive_bits_timed =
      _nfc_initiator_transceive_bits_timedPtr.asFunction<
          int Function(
              ffi.Pointer<nfc_device>,
              ffi.Pointer<ffi.Uint8>,
              int,
              ffi.Pointer<ffi.Uint8>,
              ffi.Pointer<ffi.Uint8>,
              int,
              ffi.Pointer<ffi.Uint8>,
              ffi.Pointer<ffi.Uint32>)>();

  int nfc_initiator_target_is_present(
    ffi.Pointer<nfc_device> pnd,
    ffi.Pointer<nfc_target> pnt,
  ) {
    return _nfc_initiator_target_is_present(
      pnd,
      pnt,
    );
  }

  late final _nfc_initiator_target_is_presentPtr = _lookup<
      ffi.NativeFunction<
          ffi.Int Function(ffi.Pointer<nfc_device>,
              ffi.Pointer<nfc_target>)>>('nfc_initiator_target_is_present');
  late final _nfc_initiator_target_is_present =
      _nfc_initiator_target_is_presentPtr.asFunction<
          int Function(ffi.Pointer<nfc_device>, ffi.Pointer<nfc_target>)>();

  int nfc_target_init(
    ffi.Pointer<nfc_device> pnd,
    ffi.Pointer<nfc_target> pnt,
    ffi.Pointer<ffi.Uint8> pbtRx,
    int szRx,
    int timeout,
  ) {
    return _nfc_target_init(
      pnd,
      pnt,
      pbtRx,
      szRx,
      timeout,
    );
  }

  late final _nfc_target_initPtr = _lookup<
      ffi.NativeFunction<
          ffi.Int Function(ffi.Pointer<nfc_device>, ffi.Pointer<nfc_target>,
              ffi.Pointer<ffi.Uint8>, ffi.Size, ffi.Int)>>('nfc_target_init');
  late final _nfc_target_init = _nfc_target_initPtr.asFunction<
      int Function(ffi.Pointer<nfc_device>, ffi.Pointer<nfc_target>,
          ffi.Pointer<ffi.Uint8>, int, int)>();

  int nfc_target_send_bytes(
    ffi.Pointer<nfc_device> pnd,
    ffi.Pointer<ffi.Uint8> pbtTx,
    int szTx,
    int timeout,
  ) {
    return _nfc_target_send_bytes(
      pnd,
      pbtTx,
      szTx,
      timeout,
    );
  }

  late final _nfc_target_send_bytesPtr = _lookup<
      ffi.NativeFunction<
          ffi.Int Function(ffi.Pointer<nfc_device>, ffi.Pointer<ffi.Uint8>,
              ffi.Size, ffi.Int)>>('nfc_target_send_bytes');
  late final _nfc_target_send_bytes = _nfc_target_send_bytesPtr.asFunction<
      int Function(
          ffi.Pointer<nfc_device>, ffi.Pointer<ffi.Uint8>, int, int)>();

  int nfc_target_receive_bytes(
    ffi.Pointer<nfc_device> pnd,
    ffi.Pointer<ffi.Uint8> pbtRx,
    int szRx,
    int timeout,
  ) {
    return _nfc_target_receive_bytes(
      pnd,
      pbtRx,
      szRx,
      timeout,
    );
  }

  late final _nfc_target_receive_bytesPtr = _lookup<
      ffi.NativeFunction<
          ffi.Int Function(ffi.Pointer<nfc_device>, ffi.Pointer<ffi.Uint8>,
              ffi.Size, ffi.Int)>>('nfc_target_receive_bytes');
  late final _nfc_target_receive_bytes =
      _nfc_target_receive_bytesPtr.asFunction<
          int Function(
              ffi.Pointer<nfc_device>, ffi.Pointer<ffi.Uint8>, int, int)>();

  int nfc_target_send_bits(
    ffi.Pointer<nfc_device> pnd,
    ffi.Pointer<ffi.Uint8> pbtTx,
    int szTxBits,
    ffi.Pointer<ffi.Uint8> pbtTxPar,
  ) {
    return _nfc_target_send_bits(
      pnd,
      pbtTx,
      szTxBits,
      pbtTxPar,
    );
  }

  late final _nfc_target_send_bitsPtr = _lookup<
      ffi.NativeFunction<
          ffi.Int Function(ffi.Pointer<nfc_device>, ffi.Pointer<ffi.Uint8>,
              ffi.Size, ffi.Pointer<ffi.Uint8>)>>('nfc_target_send_bits');
  late final _nfc_target_send_bits = _nfc_target_send_bitsPtr.asFunction<
      int Function(ffi.Pointer<nfc_device>, ffi.Pointer<ffi.Uint8>, int,
          ffi.Pointer<ffi.Uint8>)>();

  int nfc_target_receive_bits(
    ffi.Pointer<nfc_device> pnd,
    ffi.Pointer<ffi.Uint8> pbtRx,
    int szRx,
    ffi.Pointer<ffi.Uint8> pbtRxPar,
  ) {
    return _nfc_target_receive_bits(
      pnd,
      pbtRx,
      szRx,
      pbtRxPar,
    );
  }

  late final _nfc_target_receive_bitsPtr = _lookup<
      ffi.NativeFunction<
          ffi.Int Function(ffi.Pointer<nfc_device>, ffi.Pointer<ffi.Uint8>,
              ffi.Size, ffi.Pointer<ffi.Uint8>)>>('nfc_target_receive_bits');
  late final _nfc_target_receive_bits = _nfc_target_receive_bitsPtr.asFunction<
      int Function(ffi.Pointer<nfc_device>, ffi.Pointer<ffi.Uint8>, int,
          ffi.Pointer<ffi.Uint8>)>();

  ffi.Pointer<ffi.Char> nfc_strerror(
    ffi.Pointer<nfc_device> pnd,
  ) {
    return _nfc_strerror(
      pnd,
    );
  }

  late final _nfc_strerrorPtr = _lookup<
      ffi.NativeFunction<
          ffi.Pointer<ffi.Char> Function(
              ffi.Pointer<nfc_device>)>>('nfc_strerror');
  late final _nfc_strerror = _nfc_strerrorPtr
      .asFunction<ffi.Pointer<ffi.Char> Function(ffi.Pointer<nfc_device>)>();

  int nfc_strerror_r(
    ffi.Pointer<nfc_device> pnd,
    ffi.Pointer<ffi.Char> buf,
    int buflen,
  ) {
    return _nfc_strerror_r(
      pnd,
      buf,
      buflen,
    );
  }

  late final _nfc_strerror_rPtr = _lookup<
      ffi.NativeFunction<
          ffi.Int Function(ffi.Pointer<nfc_device>, ffi.Pointer<ffi.Char>,
              ffi.Size)>>('nfc_strerror_r');
  late final _nfc_strerror_r = _nfc_strerror_rPtr.asFunction<
      int Function(ffi.Pointer<nfc_device>, ffi.Pointer<ffi.Char>, int)>();

  void nfc_perror(
    ffi.Pointer<nfc_device> pnd,
    ffi.Pointer<ffi.Char> s,
  ) {
    return _nfc_perror(
      pnd,
      s,
    );
  }

  late final _nfc_perrorPtr = _lookup<
      ffi.NativeFunction<
          ffi.Void Function(
              ffi.Pointer<nfc_device>, ffi.Pointer<ffi.Char>)>>('nfc_perror');
  late final _nfc_perror = _nfc_perrorPtr.asFunction<
      void Function(ffi.Pointer<nfc_device>, ffi.Pointer<ffi.Char>)>();

  int nfc_device_get_last_error(
    ffi.Pointer<nfc_device> pnd,
  ) {
    return _nfc_device_get_last_error(
      pnd,
    );
  }

  late final _nfc_device_get_last_errorPtr =
      _lookup<ffi.NativeFunction<ffi.Int Function(ffi.Pointer<nfc_device>)>>(
          'nfc_device_get_last_error');
  late final _nfc_device_get_last_error = _nfc_device_get_last_errorPtr
      .asFunction<int Function(ffi.Pointer<nfc_device>)>();

  ffi.Pointer<ffi.Char> nfc_device_get_name(
    ffi.Pointer<nfc_device> pnd,
  ) {
    return _nfc_device_get_name(
      pnd,
    );
  }

  late final _nfc_device_get_namePtr = _lookup<
      ffi.NativeFunction<
          ffi.Pointer<ffi.Char> Function(
              ffi.Pointer<nfc_device>)>>('nfc_device_get_name');
  late final _nfc_device_get_name = _nfc_device_get_namePtr
      .asFunction<ffi.Pointer<ffi.Char> Function(ffi.Pointer<nfc_device>)>();

  ffi.Pointer<ffi.Char> nfc_device_get_connstring(
    ffi.Pointer<nfc_device> pnd,
  ) {
    return _nfc_device_get_connstring(
      pnd,
    );
  }

  late final _nfc_device_get_connstringPtr = _lookup<
      ffi.NativeFunction<
          ffi.Pointer<ffi.Char> Function(
              ffi.Pointer<nfc_device>)>>('nfc_device_get_connstring');
  late final _nfc_device_get_connstring = _nfc_device_get_connstringPtr
      .asFunction<ffi.Pointer<ffi.Char> Function(ffi.Pointer<nfc_device>)>();

  int nfc_device_get_supported_modulation(
    ffi.Pointer<nfc_device> pnd,
    int mode,
    ffi.Pointer<ffi.Pointer<ffi.Int32>> supported_mt,
  ) {
    return _nfc_device_get_supported_modulation(
      pnd,
      mode,
      supported_mt,
    );
  }

  late final _nfc_device_get_supported_modulationPtr = _lookup<
          ffi.NativeFunction<
              ffi.Int Function(ffi.Pointer<nfc_device>, ffi.Int32,
                  ffi.Pointer<ffi.Pointer<ffi.Int32>>)>>(
      'nfc_device_get_supported_modulation');
  late final _nfc_device_get_supported_modulation =
      _nfc_device_get_supported_modulationPtr.asFunction<
          int Function(ffi.Pointer<nfc_device>, int,
              ffi.Pointer<ffi.Pointer<ffi.Int32>>)>();

  int nfc_device_get_supported_baud_rate(
    ffi.Pointer<nfc_device> pnd,
    int nmt,
    ffi.Pointer<ffi.Pointer<ffi.Int32>> supported_br,
  ) {
    return _nfc_device_get_supported_baud_rate(
      pnd,
      nmt,
      supported_br,
    );
  }

  late final _nfc_device_get_supported_baud_ratePtr = _lookup<
          ffi.NativeFunction<
              ffi.Int Function(ffi.Pointer<nfc_device>, ffi.Int32,
                  ffi.Pointer<ffi.Pointer<ffi.Int32>>)>>(
      'nfc_device_get_supported_baud_rate');
  late final _nfc_device_get_supported_baud_rate =
      _nfc_device_get_supported_baud_ratePtr.asFunction<
          int Function(ffi.Pointer<nfc_device>, int,
              ffi.Pointer<ffi.Pointer<ffi.Int32>>)>();

  int nfc_device_get_supported_baud_rate_target_mode(
    ffi.Pointer<nfc_device> pnd,
    int nmt,
    ffi.Pointer<ffi.Pointer<ffi.Int32>> supported_br,
  ) {
    return _nfc_device_get_supported_baud_rate_target_mode(
      pnd,
      nmt,
      supported_br,
    );
  }

  late final _nfc_device_get_supported_baud_rate_target_modePtr = _lookup<
          ffi.NativeFunction<
              ffi.Int Function(ffi.Pointer<nfc_device>, ffi.Int32,
                  ffi.Pointer<ffi.Pointer<ffi.Int32>>)>>(
      'nfc_device_get_supported_baud_rate_target_mode');
  late final _nfc_device_get_supported_baud_rate_target_mode =
      _nfc_device_get_supported_baud_rate_target_modePtr.asFunction<
          int Function(ffi.Pointer<nfc_device>, int,
              ffi.Pointer<ffi.Pointer<ffi.Int32>>)>();

  int nfc_device_set_property_int(
    ffi.Pointer<nfc_device> pnd,
    int property,
    int value,
  ) {
    return _nfc_device_set_property_int(
      pnd,
      property,
      value,
    );
  }

  late final _nfc_device_set_property_intPtr = _lookup<
      ffi.NativeFunction<
          ffi.Int Function(ffi.Pointer<nfc_device>, ffi.Int32,
              ffi.Int)>>('nfc_device_set_property_int');
  late final _nfc_device_set_property_int = _nfc_device_set_property_intPtr
      .asFunction<int Function(ffi.Pointer<nfc_device>, int, int)>();

  int nfc_device_set_property_bool(
    ffi.Pointer<nfc_device> pnd,
    int property,
    bool bEnable,
  ) {
    return _nfc_device_set_property_bool(
      pnd,
      property,
      bEnable,
    );
  }

  late final _nfc_device_set_property_boolPtr = _lookup<
      ffi.NativeFunction<
          ffi.Int Function(ffi.Pointer<nfc_device>, ffi.Int32,
              ffi.Bool)>>('nfc_device_set_property_bool');
  late final _nfc_device_set_property_bool = _nfc_device_set_property_boolPtr
      .asFunction<int Function(ffi.Pointer<nfc_device>, int, bool)>();

  void nfc_free(
    ffi.Pointer<ffi.Void> p,
  ) {
    return _nfc_free(
      p,
    );
  }

  late final _nfc_freePtr =
      _lookup<ffi.NativeFunction<ffi.Void Function(ffi.Pointer<ffi.Void>)>>(
          'nfc_free');
  late final _nfc_free =
      _nfc_freePtr.asFunction<void Function(ffi.Pointer<ffi.Void>)>();

  ffi.Pointer<ffi.Char> nfc_version() {
    return _nfc_version();
  }

  late final _nfc_versionPtr =
      _lookup<ffi.NativeFunction<ffi.Pointer<ffi.Char> Function()>>(
          'nfc_version');
  late final _nfc_version =
      _nfc_versionPtr.asFunction<ffi.Pointer<ffi.Char> Function()>();

  int nfc_device_get_information_about(
    ffi.Pointer<nfc_device> pnd,
    ffi.Pointer<ffi.Pointer<ffi.Char>> buf,
  ) {
    return _nfc_device_get_information_about(
      pnd,
      buf,
    );
  }

  late final _nfc_device_get_information_aboutPtr = _lookup<
          ffi.NativeFunction<
              ffi.Int Function(ffi.Pointer<nfc_device>,
                  ffi.Pointer<ffi.Pointer<ffi.Char>>)>>(
      'nfc_device_get_information_about');
  late final _nfc_device_get_information_about =
      _nfc_device_get_information_aboutPtr.asFunction<
          int Function(
              ffi.Pointer<nfc_device>, ffi.Pointer<ffi.Pointer<ffi.Char>>)>();

  ffi.Pointer<ffi.Pointer<freefare_tag>> freefare_get_tags(
    ffi.Pointer<nfc_device> device,
  ) {
    return _freefare_get_tags(
      device,
    );
  }

  late final _freefare_get_tagsPtr = _lookup<
      ffi.NativeFunction<
          ffi.Pointer<ffi.Pointer<freefare_tag>> Function(
              ffi.Pointer<nfc_device>)>>('freefare_get_tags');
  late final _freefare_get_tags = _freefare_get_tagsPtr.asFunction<
      ffi.Pointer<ffi.Pointer<freefare_tag>> Function(
          ffi.Pointer<nfc_device>)>();

  ffi.Pointer<freefare_tag> freefare_tag_new(
    ffi.Pointer<nfc_device> device,
    nfc_target target,
  ) {
    return _freefare_tag_new(
      device,
      target,
    );
  }

  late final _freefare_tag_newPtr = _lookup<
      ffi.NativeFunction<
          ffi.Pointer<freefare_tag> Function(
              ffi.Pointer<nfc_device>, nfc_target)>>('freefare_tag_new');
  late final _freefare_tag_new = _freefare_tag_newPtr.asFunction<
      ffi.Pointer<freefare_tag> Function(
          ffi.Pointer<nfc_device>, nfc_target)>();

  int freefare_get_tag_type(
    ffi.Pointer<freefare_tag> tag,
  ) {
    return _freefare_get_tag_type(
      tag,
    );
  }

  late final _freefare_get_tag_typePtr = _lookup<
          ffi.NativeFunction<ffi.Int32 Function(ffi.Pointer<freefare_tag>)>>(
      'freefare_get_tag_type');
  late final _freefare_get_tag_type = _freefare_get_tag_typePtr
      .asFunction<int Function(ffi.Pointer<freefare_tag>)>();

  ffi.Pointer<ffi.Char> freefare_get_tag_friendly_name(
    ffi.Pointer<freefare_tag> tag,
  ) {
    return _freefare_get_tag_friendly_name(
      tag,
    );
  }

  late final _freefare_get_tag_friendly_namePtr = _lookup<
      ffi.NativeFunction<
          ffi.Pointer<ffi.Char> Function(
              ffi.Pointer<freefare_tag>)>>('freefare_get_tag_friendly_name');
  late final _freefare_get_tag_friendly_name =
      _freefare_get_tag_friendly_namePtr.asFunction<
          ffi.Pointer<ffi.Char> Function(ffi.Pointer<freefare_tag>)>();

  ffi.Pointer<ffi.Char> freefare_get_tag_uid(
    ffi.Pointer<freefare_tag> tag,
  ) {
    return _freefare_get_tag_uid(
      tag,
    );
  }

  late final _freefare_get_tag_uidPtr = _lookup<
      ffi.NativeFunction<
          ffi.Pointer<ffi.Char> Function(
              ffi.Pointer<freefare_tag>)>>('freefare_get_tag_uid');
  late final _freefare_get_tag_uid = _freefare_get_tag_uidPtr
      .asFunction<ffi.Pointer<ffi.Char> Function(ffi.Pointer<freefare_tag>)>();

  void freefare_free_tag(
    ffi.Pointer<freefare_tag> tag,
  ) {
    return _freefare_free_tag(
      tag,
    );
  }

  late final _freefare_free_tagPtr =
      _lookup<ffi.NativeFunction<ffi.Void Function(ffi.Pointer<freefare_tag>)>>(
          'freefare_free_tag');
  late final _freefare_free_tag = _freefare_free_tagPtr
      .asFunction<void Function(ffi.Pointer<freefare_tag>)>();

  void freefare_free_tags(
    ffi.Pointer<ffi.Pointer<freefare_tag>> tags,
  ) {
    return _freefare_free_tags(
      tags,
    );
  }

  late final _freefare_free_tagsPtr = _lookup<
      ffi.NativeFunction<
          ffi.Void Function(
              ffi.Pointer<ffi.Pointer<freefare_tag>>)>>('freefare_free_tags');
  late final _freefare_free_tags = _freefare_free_tagsPtr
      .asFunction<void Function(ffi.Pointer<ffi.Pointer<freefare_tag>>)>();

  bool freefare_selected_tag_is_present(
    ffi.Pointer<nfc_device> device,
  ) {
    return _freefare_selected_tag_is_present(
      device,
    );
  }

  late final _freefare_selected_tag_is_presentPtr =
      _lookup<ffi.NativeFunction<ffi.Bool Function(ffi.Pointer<nfc_device>)>>(
          'freefare_selected_tag_is_present');
  late final _freefare_selected_tag_is_present =
      _freefare_selected_tag_is_presentPtr
          .asFunction<bool Function(ffi.Pointer<nfc_device>)>();

  void freefare_set_tag_timeout(
    ffi.Pointer<freefare_tag> tag,
    int timeout,
  ) {
    return _freefare_set_tag_timeout(
      tag,
      timeout,
    );
  }

  late final _freefare_set_tag_timeoutPtr = _lookup<
      ffi.NativeFunction<
          ffi.Void Function(
              ffi.Pointer<freefare_tag>, ffi.Int)>>('freefare_set_tag_timeout');
  late final _freefare_set_tag_timeout = _freefare_set_tag_timeoutPtr
      .asFunction<void Function(ffi.Pointer<freefare_tag>, int)>();

  ffi.Pointer<ffi.Char> freefare_version() {
    return _freefare_version();
  }

  late final _freefare_versionPtr =
      _lookup<ffi.NativeFunction<ffi.Pointer<ffi.Char> Function()>>(
          'freefare_version');
  late final _freefare_version =
      _freefare_versionPtr.asFunction<ffi.Pointer<ffi.Char> Function()>();

  ffi.Pointer<ffi.Char> freefare_strerror(
    ffi.Pointer<freefare_tag> tag,
  ) {
    return _freefare_strerror(
      tag,
    );
  }

  late final _freefare_strerrorPtr = _lookup<
      ffi.NativeFunction<
          ffi.Pointer<ffi.Char> Function(
              ffi.Pointer<freefare_tag>)>>('freefare_strerror');
  late final _freefare_strerror = _freefare_strerrorPtr
      .asFunction<ffi.Pointer<ffi.Char> Function(ffi.Pointer<freefare_tag>)>();

  int freefare_strerror_r(
    ffi.Pointer<freefare_tag> tag,
    ffi.Pointer<ffi.Char> buffer,
    int len,
  ) {
    return _freefare_strerror_r(
      tag,
      buffer,
      len,
    );
  }

  late final _freefare_strerror_rPtr = _lookup<
      ffi.NativeFunction<
          ffi.Int Function(ffi.Pointer<freefare_tag>, ffi.Pointer<ffi.Char>,
              ffi.Size)>>('freefare_strerror_r');
  late final _freefare_strerror_r = _freefare_strerror_rPtr.asFunction<
      int Function(ffi.Pointer<freefare_tag>, ffi.Pointer<ffi.Char>, int)>();

  void freefare_perror(
    ffi.Pointer<freefare_tag> tag,
    ffi.Pointer<ffi.Char> string,
  ) {
    return _freefare_perror(
      tag,
      string,
    );
  }

  late final _freefare_perrorPtr = _lookup<
      ffi.NativeFunction<
          ffi.Void Function(ffi.Pointer<freefare_tag>,
              ffi.Pointer<ffi.Char>)>>('freefare_perror');
  late final _freefare_perror = _freefare_perrorPtr.asFunction<
      void Function(ffi.Pointer<freefare_tag>, ffi.Pointer<ffi.Char>)>();

  int nfc_emulate_target(
    ffi.Pointer<nfc_device> pnd,
    ffi.Pointer<nfc_emulator> emulator,
    int timeout,
  ) {
    return _nfc_emulate_target(
      pnd,
      emulator,
      timeout,
    );
  }

  late final _nfc_emulate_targetPtr = _lookup<
      ffi.NativeFunction<
          ffi.Int Function(ffi.Pointer<nfc_device>, ffi.Pointer<nfc_emulator>,
              ffi.Int)>>('nfc_emulate_target');
  late final _nfc_emulate_target = _nfc_emulate_targetPtr.asFunction<
      int Function(ffi.Pointer<nfc_device>, ffi.Pointer<nfc_emulator>, int)>();
}

final class freefare_tag extends ffi.Struct {
  external ffi.Pointer<ffi.Int> device;

  @ffi.Int()
  external int info;

  @ffi.Int()
  external int type;

  @ffi.Int()
  external int active;

  @ffi.Int()
  external int timeout;

  external ffi.Pointer<ffi.NativeFunction<ffi.Void Function(ffi.Int tag)>>
      free_tag;
}

final class nfc_context extends ffi.Opaque {}

final class nfc_device extends ffi.Opaque {}

final class nfc_driver extends ffi.Opaque {}

/// @struct nfc_dep_info
/// @brief NFC target information in D.E.P. (Data Exchange Protocol) see ISO/IEC 18092 (NFCIP-1)
@ffi.Packed(1)
final class nfc_dep_info extends ffi.Struct {
  /// NFCID3
  @ffi.Array.multi([10])
  external ffi.Array<ffi.Uint8> abtNFCID3;

  /// DID
  @ffi.Uint8()
  external int btDID;

  /// Supported send-bit rate
  @ffi.Uint8()
  external int btBS;

  /// Supported receive-bit rate
  @ffi.Uint8()
  external int btBR;

  /// Timeout value
  @ffi.Uint8()
  external int btTO;

  /// PP Parameters
  @ffi.Uint8()
  external int btPP;

  /// General Bytes
  @ffi.Array.multi([48])
  external ffi.Array<ffi.Uint8> abtGB;

  @ffi.Size()
  external int szGB;

  /// DEP mode
  @ffi.Int32()
  external int ndm;
}

/// @enum nfc_dep_mode
/// @brief NFC D.E.P. (Data Exchange Protocol) active/passive mode
abstract class nfc_dep_mode {
  static const int NDM_UNDEFINED = 0;
  static const int NDM_PASSIVE = 1;
  static const int NDM_ACTIVE = 2;
}

/// @struct nfc_iso14443a_info
/// @brief NFC ISO14443A tag (MIFARE) information
@ffi.Packed(1)
final class nfc_iso14443a_info extends ffi.Struct {
  @ffi.Array.multi([2])
  external ffi.Array<ffi.Uint8> abtAtqa;

  @ffi.Uint8()
  external int btSak;

  @ffi.Size()
  external int szUidLen;

  @ffi.Array.multi([10])
  external ffi.Array<ffi.Uint8> abtUid;

  @ffi.Size()
  external int szAtsLen;

  @ffi.Array.multi([254])
  external ffi.Array<ffi.Uint8> abtAts;
}

/// @struct nfc_felica_info
/// @brief NFC FeLiCa tag information
@ffi.Packed(1)
final class nfc_felica_info extends ffi.Struct {
  @ffi.Size()
  external int szLen;

  @ffi.Uint8()
  external int btResCode;

  @ffi.Array.multi([8])
  external ffi.Array<ffi.Uint8> abtId;

  @ffi.Array.multi([8])
  external ffi.Array<ffi.Uint8> abtPad;

  @ffi.Array.multi([2])
  external ffi.Array<ffi.Uint8> abtSysCode;
}

/// @struct nfc_iso14443b_info
/// @brief NFC ISO14443B tag information
final class nfc_iso14443b_info extends ffi.Struct {
  /// abtPupi store PUPI contained in ATQB (Answer To reQuest of type B) (see ISO14443-3)
  @ffi.Array.multi([4])
  external ffi.Array<ffi.Uint8> abtPupi;

  /// abtApplicationData store Application Data contained in ATQB (see ISO14443-3)
  @ffi.Array.multi([4])
  external ffi.Array<ffi.Uint8> abtApplicationData;

  /// abtProtocolInfo store Protocol Info contained in ATQB (see ISO14443-3)
  @ffi.Array.multi([3])
  external ffi.Array<ffi.Uint8> abtProtocolInfo;

  /// ui8CardIdentifier store CID (Card Identifier) attributted by PCD to the PICC
  @ffi.Uint8()
  external int ui8CardIdentifier;
}

/// @struct nfc_iso14443bi_info
/// @brief NFC ISO14443B' tag information
@ffi.Packed(1)
final class nfc_iso14443bi_info extends ffi.Struct {
  /// DIV: 4 LSBytes of tag serial number
  @ffi.Array.multi([4])
  external ffi.Array<ffi.Uint8> abtDIV;

  /// Software version & type of REPGEN
  @ffi.Uint8()
  external int btVerLog;

  /// Config Byte, present if long REPGEN
  @ffi.Uint8()
  external int btConfig;

  /// ATR, if any
  @ffi.Size()
  external int szAtrLen;

  @ffi.Array.multi([33])
  external ffi.Array<ffi.Uint8> abtAtr;
}

/// @struct nfc_iso14443biclass_info
/// @brief NFC ISO14443BiClass tag information
final class nfc_iso14443biclass_info extends ffi.Struct {
  @ffi.Array.multi([8])
  external ffi.Array<ffi.Uint8> abtUID;
}

/// @struct nfc_iso14443b2sr_info
/// @brief NFC ISO14443-2B ST SRx tag information
final class nfc_iso14443b2sr_info extends ffi.Struct {
  @ffi.Array.multi([8])
  external ffi.Array<ffi.Uint8> abtUID;
}

/// @struct nfc_iso14443b2ct_info
/// @brief NFC ISO14443-2B ASK CTx tag information
final class nfc_iso14443b2ct_info extends ffi.Struct {
  @ffi.Array.multi([4])
  external ffi.Array<ffi.Uint8> abtUID;

  @ffi.Uint8()
  external int btProdCode;

  @ffi.Uint8()
  external int btFabCode;
}

/// @struct nfc_jewel_info
/// @brief NFC Jewel tag information
final class nfc_jewel_info extends ffi.Struct {
  @ffi.Array.multi([2])
  external ffi.Array<ffi.Uint8> btSensRes;

  @ffi.Array.multi([4])
  external ffi.Array<ffi.Uint8> btId;
}

/// @struct nfc_barcode_info
/// @brief Thinfilm NFC Barcode information
@ffi.Packed(1)
final class nfc_barcode_info extends ffi.Struct {
  @ffi.Size()
  external int szDataLen;

  @ffi.Array.multi([32])
  external ffi.Array<ffi.Uint8> abtData;
}

/// @struct nfc_modulation
/// @brief NFC modulation structure
@ffi.Packed(1)
final class nfc_modulation extends ffi.Struct {
  @ffi.Int32()
  external int nmt;

  @ffi.Int32()
  external int nbr;
}

/// @enum nfc_modulation_type
/// @brief NFC modulation type enumeration
abstract class nfc_modulation_type {
  static const int NMT_ISO14443A = 1;
  static const int NMT_JEWEL = 2;
  static const int NMT_ISO14443B = 3;
  static const int NMT_ISO14443BI = 4;
  static const int NMT_ISO14443B2SR = 5;
  static const int NMT_ISO14443B2CT = 6;
  static const int NMT_FELICA = 7;
  static const int NMT_DEP = 8;
  static const int NMT_BARCODE = 9;
  static const int NMT_ISO14443BICLASS = 10;
  static const int NMT_END_ENUM = 10;
}

/// @enum nfc_baud_rate
/// @brief NFC baud rate enumeration
abstract class nfc_baud_rate {
  static const int NBR_UNDEFINED = 0;
  static const int NBR_106 = 1;
  static const int NBR_212 = 2;
  static const int NBR_424 = 3;
  static const int NBR_847 = 4;
}

/// @struct nfc_target
/// @brief NFC target structure
final class nfc_target extends ffi.Struct {
  external nfc_target_info nti;

  external nfc_modulation nm;
}

/// @union nfc_target_info
/// @brief Union between all kind of tags information structures.
final class nfc_target_info extends ffi.Union {
  external nfc_iso14443a_info nai;

  external nfc_felica_info nfi;

  external nfc_iso14443b_info nbi;

  external nfc_iso14443bi_info nii;

  external nfc_iso14443b2sr_info nsi;

  external nfc_iso14443b2ct_info nci;

  external nfc_jewel_info nji;

  external nfc_dep_info ndi;

  external nfc_barcode_info nti;

  external nfc_iso14443biclass_info nhi;
}

/// @enum nfc_mode
/// @brief NFC mode type enumeration
abstract class nfc_mode {
  static const int N_TARGET = 0;
  static const int N_INITIATOR = 1;
}

/// Properties
abstract class nfc_property {
  /// Default command processing timeout
  /// Property value's (duration) unit is ms and 0 means no timeout (infinite).
  /// Default value is set by driver layer
  static const int NP_TIMEOUT_COMMAND = 0;

  /// Timeout between ATR_REQ and ATR_RES
  /// When the device is in initiator mode, a target is considered as mute if no
  /// valid ATR_RES is received within this timeout value.
  /// Default value for this property is 103 ms on PN53x based devices.
  static const int NP_TIMEOUT_ATR = 1;

  /// Timeout value to give up reception from the target in case of no answer.
  /// Default value for this property is 52 ms).
  static const int NP_TIMEOUT_COM = 2;

  /// Let the PN53X chip handle the CRC bytes. This means that the chip appends
  /// the CRC bytes to the frames that are transmitted. It will parse the last
  /// bytes from received frames as incoming CRC bytes. They will be verified
  /// against the used modulation and protocol. If an frame is expected with
  /// incorrect CRC bytes this option should be disabled. Example frames where
  /// this is useful are the ATQA and UID+BCC that are transmitted without CRC
  /// bytes during the anti-collision phase of the ISO14443-A protocol.
  static const int NP_HANDLE_CRC = 3;

  /// Parity bits in the network layer of ISO14443-A are by default generated and
  /// validated in the PN53X chip. This is a very convenient feature. On certain
  /// times though it is useful to get full control of the transmitted data. The
  /// proprietary MIFARE Classic protocol uses for example custom (encrypted)
  /// parity bits. For interoperability it is required to be completely
  /// compatible, including the arbitrary parity bits. When this option is
  /// disabled, the functions to communicating bits should be used.
  static const int NP_HANDLE_PARITY = 4;

  /// This option can be used to enable or disable the electronic field of the
  /// NFC device.
  static const int NP_ACTIVATE_FIELD = 5;

  /// The internal CRYPTO1 co-processor can be used to transmit messages
  /// encrypted. This option is automatically activated after a successful MIFARE
  /// Classic authentication.
  static const int NP_ACTIVATE_CRYPTO1 = 6;

  /// The default configuration defines that the PN53X chip will try indefinitely
  /// to invite a tag in the field to respond. This could be desired when it is
  /// certain a tag will enter the field. On the other hand, when this is
  /// uncertain, it will block the application. This option could best be compared
  /// to the (NON)BLOCKING option used by (socket)network programming.
  static const int NP_INFINITE_SELECT = 7;

  /// If this option is enabled, frames that carry less than 4 bits are allowed.
  /// According to the standards these frames should normally be handles as
  /// invalid frames.
  static const int NP_ACCEPT_INVALID_FRAMES = 8;

  /// If the NFC device should only listen to frames, it could be useful to let
  /// it gather multiple frames in a sequence. They will be stored in the internal
  /// FIFO of the PN53X chip. This could be retrieved by using the receive data
  /// functions. Note that if the chip runs out of bytes (FIFO = 64 bytes long),
  /// it will overwrite the first received frames, so quick retrieving of the
  /// received data is desirable.
  static const int NP_ACCEPT_MULTIPLE_FRAMES = 9;

  /// This option can be used to enable or disable the auto-switching mode to
  /// ISO14443-4 is device is compliant.
  /// In initiator mode, it means that NFC chip will send RATS automatically when
  /// select and it will automatically poll for ISO14443-4 card when ISO14443A is
  /// requested.
  /// In target mode, with a NFC chip compliant (ie. PN532), the chip will
  /// emulate a 14443-4 PICC using hardware capability
  static const int NP_AUTO_ISO14443_4 = 10;

  /// Use automatic frames encapsulation and chaining.
  static const int NP_EASY_FRAMING = 11;

  /// Force the chip to switch in ISO14443-A
  static const int NP_FORCE_ISO14443_A = 12;

  /// Force the chip to switch in ISO14443-B
  static const int NP_FORCE_ISO14443_B = 13;

  /// Force the chip to run at 106 kbps
  static const int NP_FORCE_SPEED_106 = 14;
}

abstract class freefare_tag_type {
  static const int FELICA = 0;
  static const int MIFARE_MINI = 1;
  static const int MIFARE_CLASSIC_1K = 2;
  static const int MIFARE_CLASSIC_4K = 3;
  static const int MIFARE_DESFIRE = 4;
  static const int MIFARE_ULTRALIGHT = 5;
  static const int MIFARE_ULTRALIGHT_C = 6;
  static const int NTAG_21x = 7;
}

/// @struct nfc_emulator
/// @brief NFC emulator structure
final class nfc_emulator extends ffi.Struct {
  external ffi.Pointer<nfc_target> target;

  external ffi.Pointer<nfc_emulation_state_machine> state_machine;

  external ffi.Pointer<ffi.Void> user_data;
}

/// @struct nfc_emulation_state_machine
/// @brief  NFC emulation state machine structure
final class nfc_emulation_state_machine extends ffi.Struct {
  external ffi.Pointer<
      ffi.NativeFunction<
          ffi.Int Function(
              ffi.Pointer<nfc_emulator> emulator,
              ffi.Pointer<ffi.Uint8> data_in,
              ffi.Size data_in_len,
              ffi.Pointer<ffi.Uint8> data_out,
              ffi.Size data_out_len)>> io;

  external ffi.Pointer<ffi.Void> data;
}
